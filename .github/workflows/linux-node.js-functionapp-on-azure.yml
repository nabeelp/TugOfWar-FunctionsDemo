name: azure-deploy

on:
  push:
    branches: [ master ]

env:
  NODE_VERSION: '8.x'
  AZURE_RESOURCE_GROUP_NAME: 'csu-tugofwar'
  AZURE_FUNCTIONAPP_NAME: 'csu-tugofwar'
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root

defaults:
  run:
    shell: bash

jobs:
    deploy-az-infrastructure:
      runs-on: ubuntu-latest
      steps:

       # Authentication
       # Set up the following secrets in your repository: AZURE_CREDENTIALS
       # For details see https://docs.microsoft.com/en-us/azure/developer/github/connect-from-azure
       - name: 'Login to Azure'
         uses: azure/login@v1
         with:
           creds: ${{ secrets.AZURE_CREDENTIALS }}

       # Makes source code accessible via $github.workspace
       - name: 'Checking out source code ...'
         uses: actions/checkout@v2
 
       # Deploy Azure function app
       # Note: Using Azure CLI for deployment as it provides more verbose error messages
       - name: 'Creating Azure Function App'
         uses: azure/CLI@v1
         with:
           inlineScript: |
             DEPLOYMENT_OUTPUTS=$(az deployment group create \
             --name az-func-workflow-deploy \
             --resource-group ${{ env.AZURE_RESOURCE_GROUP_NAME }} \
             --template-file $GITHUB_WORKSPACE/azuredeploy.json \
             --mode incremental \
             --parameters $GITHUB_WORKSPACE/parameters.json \
             --query properties.outputs)

             echo 'convert deployment outputs to outputs'
             echo $DEPLOYMENT_OUTPUTS | jq -c '. | to_entries[] | [.key, .value.value]' |
               while IFS=$"\n" read -r c; do
                 OUTPUT_NAME=$(echo "$c" | jq -r '.[0]')
                 OUTPUT_VALUE=$(echo "$c" | jq -r '.[1]')
                 echo "setting output $OUTPUT_NAME=$OUTPUT_VALUE"
                 echo "::set-output name=$OUTPUT_NAME::$OUTPUT_VALUE"
               done
 
    ############################################################################

    build-az-function:
      needs: [deploy-az-infrastructure]
      runs-on: ubuntu-latest
      steps:
      
       # Makes source code accessible via $github.workspace
       - name: 'Checking out source code ...'
         uses: actions/checkout@v2

       - name: Setup Node ${{ env.NODE_VERSION }} Environment
         uses: actions/setup-node@v1
         with:
           node-version: ${{ env.NODE_VERSION }}

       - name: 'Resolve Project Dependencies Using Npm'
         shell: bash
         run: |
           pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
           npm install
           npm run build --if-present
           npm run test --if-present
           popd
       
    ############################################################################

    deploy-az-function:
      needs: [build-az-function]
      runs-on: ubuntu-latest
      steps:
      
       # Makes source code accessible via $github.workspace
       - name: 'Checking out source code ...'
         uses: actions/checkout@v2
       
       # Authentication
       # Set up the following secrets in your repository: AZURE_CREDENTIALS
       # For details see https://docs.microsoft.com/en-us/azure/developer/github/connect-from-azure
       - name: 'Login to Azure'
         uses: azure/login@v1
         with:
           creds: ${{ secrets.AZURE_CREDENTIALS }}
           enable-AzPSSession: true
       
       - name: 'Fetching Azure Functions Publishing Profile'
         id: fncapp
         uses: azure/powershell@v1
         with:
           inlineScript: |
               $profile = ""
               $profile = Get-AzWebAppPublishingProfile -ResourceGroupName $env:AZURE_RESOURCE_GROUP_NAME -Name $env:AZURE_FUNCTIONAPP_NAME
               $profile = $profile.Replace("`r", "").Replace("`n", "")
               Write-Output "::set-output name=pubprofile::$profile"
               Remove-Variable profile
           azPSVersion: "latest"

       # Deploy Azure functions code
       - name: 'Run Azure Functions Action'
         uses: azure/functions-action@v1
         with:
           app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
           package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
           publish-profile: ${{ steps.fncapp.outputs.pubprofile }}

       # Copy files from Client folder to "content" blob container
       - name: 'Copy Client files'
         uses: azure/CLI@v1
         with:
           inlineScript: |
             az storage azcopy blob upload -c content \
             --account-name ${{ env.storageName }} \
             -s "Client/*" --recursive \
 